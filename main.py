import math
import numpy as np


traning_set_times = [0.18, 0.35, 0.29, 0.29, 0.29, 0.18, 0.29, 0.35, 0.29, 0.23, 0.23, 0.23, 0.29, 0.23, 0.53, 0.53, 0.58, 0.41, 0.47, 0.58, 0.7, 0.35, 0.29, 0.52, 0.41, 0.64, 0.52, 0.7, 0.35, 0.35, 0.52, 0.52, 0.76, 0.7, 0.7, 0.75, 1.05, 0.05, 0.05, 0.46, 0.34, 0.28, 0.63, 0.1, 0.46, 0.46, 0.75, 0.63, 0.1, 0.16, 0.69, 0.46, 0.63, 0.45, 0.45, 0.45, 0.22, 0.34, 0.22, 0.39, 0.51, 0.28, 0.63, 0.39, 0.45, 0.39, 0.39, 0.57, 0.45, 0.63, 0.1, 0.1, 0.1, 0.1, 0.45, 0.68, 0.39, 0.45, 0.51, 0.68, 0.45, 0.33, 0.45, 0.51, 0.33, 0.52, 0.52, 0.52]
traning_set_areas =  [-0.13, 0.26, -0.13, -0.08, -0.09, 0.1, -0.07, 0.03, 0.01, 0.12, -0.01, -0.0, -0.14, -0.14, -0.13, -0.19, -0.01, 0.1, 0.08, 0.78, 0.1, 0.0, 0.28, 0.67, 0.37, -0.01, -0.18, -0.01, -0.09, -0.18, 0.24, -0.02, -0.01, 0.1, -0.13, 0.31, 0.04, 0.04, -0.1, -0.12, -0.22, -0.06, -0.13, -0.11, -0.13, -0.14, -0.11, -0.06, -0.06, -0.09, -0.16, -0.18, 0.26, -0.17, -0.02, -0.12, -0.08, -0.06, -0.08, -0.09, -0.01, -0.01, -0.09, -0.01, -0.14, 0.01, 0.03, 0.03, 0.03, 0.03, -0.1, -0.12, -0.1, 0.1, 0.1, 0.1, 0.1, 0.05, -0.07, -0.05, 0.06, 0.02, -0.03, 0.06, 0.07, 0.06, -0.02, -0.0]
traning_set_prices = [-0.01, 0.01, 0.01, 0.03, 0.02, 0.07, -0.03, 0.03, 0.04, 0.08, -0.02, -0.02, -0.0, -0.0, 0.01, 0.04, 0.12, 0.2, 0.37, 0.89, -0.01, 0.02, 0.02, 0.86, -0.04, -0.02, -0.01, 0.06, -0.07, -0.11, -0.11, -0.09, -0.09, -0.07, -0.07, -0.07, -0.07, -0.07, -0.06, -0.06, -0.06, -0.06, -0.06, -0.06, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.05, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.02, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.04, -0.03, -0.03, -0.03, -0.03, -0.03, -0.03, -0.03, -0.03, -0.02, -0.02, -0.02, -0.01, -0.01, -0.01, -0.01]

# Change row vector to column vector
traning_set_times = np.array([traning_set_times]).T
traning_set_areas = np.array([traning_set_areas]).T
traning_set_prices = np.array([traning_set_prices]).T


# combine traning_set_areas vs traning_set_times
M = np.concatenate((traning_set_areas, traning_set_times), axis = 1)

# Create vector 1
ones = np.ones((M.shape[0],1), dtype=np.int8)

# Combine 1 and A
A = np.concatenate((M, ones), axis =1)

# Use fomular
x = np.linalg.inv(A.transpose().dot(A)).dot(A.transpose()).dot(traning_set_prices)

print(x)

#test predict by the formula when using scaling(test data :8720万円, time :3,area: 64.9)
# area : 63.48, max- min :142.45000000000002,
# time : 7.35, 		      17
# price: 7290	         ,36810
x_test = [(64.9-63.48)/142.45, (3- 7.2)/17]
y_test = x_test[0]*x[0][0] + x[1][0]*x_test[1] + x[2][0]

print(y_test*(36810) + 7290)
#result : 8581





